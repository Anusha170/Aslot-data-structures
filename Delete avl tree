// Recursive function to delete a node

// with given key from subtree with

// given root. It returns root of the

// modified subtree.

Node* deleteNode(Node* root, int key)

{

		// STEP 1: PERFORM STANDARD BST DELETE

	if (root == NULL)

		return root;

	// If the key to be deleted is smaller

	// than the root's key, then it lies

	// in left subtree

	if ( key < root->key )

		root->left = deleteNode(root->left, key);

	// If the key to be deleted is greater

	// than the root's key, then it lies

	// in right subtree

	else if( key > root->key )

		root->right = deleteNode(root->right, key);

	// if key is same as root's key, then

	// This is the node to be deleted

	else

	{

		// node with only one child or no child

		if( (root->left == NULL) ||

			(root->right == NULL) )

		{

			Node *temp = root->left ?

						root->left :

						root->right;

			// No child case

			if (temp == NULL)

			{

				temp = root;

				root = NULL;

			}

			else // One child case

			*root = *temp; // Copy the contents of

						// the non-empty child

			free(temp);

		}

		else

		{

			// node with two children: Get the inorder

			// successor (smallest in the right subtree)

			Node* temp = minValueNode(root->right);

			// Copy the inorder successor's

			// data to this node

			root->key = temp->key;

			// Delete the inorder successor

			root->right = deleteNode(root->right,

									temp->key);

		}

	}

	// If the tree had only one node

	// then return

	if (root == NULL)

	return root;

	// STEP 2: UPDATE HEIGHT OF THE CURRENT NODE

	root->height = 1 + max(height(root->left),

						height(root->right));

	// STEP 3: GET THE BALANCE FACTOR OF

	// THIS NODE (to check whether this

	// node became unbalanced)

	int balance = getBalance(root);

	// If this node becomes unbalanced,

	// then there are 4 cases

	// Left Left Case

	if (balance > 1 &&

		getBalance(root->left) >= 0)

		return rightRotate(root);

	// Left Right Case

	if (balance > 1 &&

		getBalance(root->left) < 0)

	{

		root->left = leftRotate(root->left);

		return rightRotate(root);

	}

	// Right Right Case

	if (balance < -1 &&

		getBalance(root->right) <= 0)

		return leftRotate(root);

	// Right Left Case

	if (balance < -1 &&

		getBalance(root->right) > 0)

	{

		root->right = rightRotate(root->right);

		return leftRotate(root);

	}

	return root;

}

// A utility function to print preorder

// traversal of the tree.

// The function also prints height

// of every node

void preOrder(Node *root)

{

	if(root != NULL)

	{

		cout << root->key << " ";

		preOrder(root->left);

		preOrder(root->right);

	}

}

// Driver Code

int main()

{

Node *root = NULL;

	/* Constructing tree given in

	the above figure */

	root = insert(root, 9);

	root = insert(root, 5);

	root = insert(root, 10);

	root = insert(root, 0);

	root = insert(root, 6);

	root = insert(root, 11);

	root = insert(root, -1);

	root = insert(root, 1);

	root = insert(root, 2);

	/* The constructed AVL Tree would be

			9

		/ \

		1 10

		/ \ \

	0 5 11

	/ / \

	-1 2 6

	*/

	cout << "Preorder traversal of the "

			"constructed AVL tree is \n";

	preOrder(root);

	root = deleteNode(root, 10);

	/* The AVL Tree after deletion of 10

			1

		/ \

		0 9

		/ / \

	-1 5	 11

		/ \

		2 6

	*/

	cout << "\nPreorder traversal after"

		<< " deletion of 10 \n";

	preOrder(root);

	return 0;

}

// This code is 
